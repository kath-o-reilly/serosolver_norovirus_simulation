alpha <- rep(0.6,dim(alpha_index)[1]) # 6 values for cross-reactivity [this is a multilier]
# functions
fun01 <- function(x){
tmp <- which(x>0)
return(tmp)
}
tmp <- sample.int(years,size=n,replace=T)  # equally spaced.
born_id <- tmp[order(tmp)]
ysera$born_yr <- NA
# generate data
for(i in 1:n){
oo <- which(ysera$id==i)
ysera$born_yr[oo] <- born_id[i]
}
ysera$age <- 0
ysera$vars2 <- paste0("var-",letters[ysera$vars])
# loop through each ID
for(i in 1:n){
oo <- which(ysera$id==i)
# select when child i is born...
# work through each year to look at infection history
# but only start this once child is born
# which variant?
for(t in ysera$born_yr[i]:years){
# calculate age
dd <- which(ysera$id==i & ysera$years==t)
ysera$age[dd] <- t-(born_id[i]-1)
# exposure in that year
tmp1 <- rmultinom(1,size=1,prob=p[t,])
tmp2 <- apply(tmp1,2,fun01)
aa <- which(ysera$id==i & ysera$years==t)
ee <- which(ysera$id==i & ysera$years==t & ysera$vars==tmp2)
if(length(aa)>0){
# if exposure, then create a response for that
ysera$u[aa] <- tmp2 # variant of which infection happened that year
ysera$titre[ee] <- rnorm(1,y0_mn,y0_sd) # start the response
if(model == "crossrect"){  # add in cross-reactivity responses
ff <- which(ysera$id==i & ysera$years==t & ysera$vars!=tmp2)  # select the titres
gg <- which(alpha_index[,1]==tmp2 & alpha_index[,2]!=tmp2) # returns the index of the parameter
ysera$titre[ff] <- ysera$titre[ee]*alpha[gg] # should always be less than the infecting response
}
}
# waning response, for those that had one last year...
if(t>1){
if(model != "crossrect"){
for(v in 1:vars){
bb <- which(ysera$id==i & ysera$years==(t-1) & ysera$vars==v)
if(ysera$titre[bb]>0.1){
cc <- which(ysera$id==i & ysera$years==(t) & ysera$vars==v)
if(ysera$u[cc]!=v){
# control for elevation/exposure for multiple years
ysera$titre[cc] <- ysera$titre[bb]*exp(-mu)
}
}
}
}else{
# all should decline. If it is this years infection skip
for(v in 1:vars){
cc <- which(ysera$id==i & ysera$years==(t) & ysera$vars==v)
hh <- which(ysera$id==i & ysera$years==(t-1) & ysera$vars==v)
if(ysera$u[cc]!=v){
# control for elevation/exposure for multiple years
ysera$titre[cc] <- ysera$titre[hh]*exp(-mu)
}
}
} # else
} # t>1
} # t
} # i
# select a year for bleeding for each ID
# this needs to be more complicated because of year born and max age
# and the bleed year must be 6-10...
bleed_id <- sample(6:10,size=n,replace=T)
# resample if not 6-10?
for(i in 1:n){
if(bleed_id[i] < born_id[i]){
bleed_id[i] <- sample(6:10,size=1,replace=T)
}
if(bleed_id[i] < born_id[i]){
bleed_id[i] <- 10
}
}
# now need to go through and select sera...
oo <- which(ysera$id==1 & ysera$years==bleed_id[1])
ysamp <- ysera[oo,]
# loop through...
for(i in 2:n){
oo <- which(ysera$id==i & ysera$years==bleed_id[i])
if(ysera$age[oo[1]]<7){
ysamp <- rbind(ysamp,ysera[oo,])
}else{
warning(paste("too old, id",ysera$id[oo[1]]))
}
}
# what is the sample now?
ysamp$years_real <- ysamp$years+2002
table(ysamp$years_real[ysamp$vars2=="var-a"],ysamp$age[ysamp$vars2=="var-a"])
# plot Ab response if we just had this data
ggplot(ysamp,aes(x=jitter(vars),y=titre)) + geom_point()
# mean by year?
tmp1 <- ysamp %>% group_by(vars2,years_real) %>% summarise(n=n(),mean=mean(titre),sd=sd(titre))
ggplot(tmp1,aes(x=vars2,y=mean,fill=as.factor(years_real))) +
geom_bar(stat="identity",position=position_dodge()) +
scale_fill_brewer("Year",palette="Blues") +
xlab("Variant") + ylab("Mean titre (log scale)") +
theme_bw()
tmp2 <- ysamp %>% filter(age<7) %>% group_by(vars2,age,years_real) %>% summarise(n=n(),
mean=mean(titre),
sd=sd(titre))
class(tmp2$mean)
ggplot(tmp2,aes(x=as.factor(years_real),y=as.factor(age),fill=mean)) +
geom_tile() +
facet_wrap(~vars2) +
scale_fill_gradient2(low = "#045a8d",high = "#ef8a62",mid = "white",midpoint = 2.5,
limit = c(0,5)) +  # blue to red
#scale_fill_brewer("ID50",palette="Blues") +
xlab("Year") + ylab("Age") +
theme_bw()
# end
# end
# end
model <-  "crossrect"#"default" #"crossrect"#"cocirc" #"crossrect" #
years <- 10   # years being followed
vars <- 4    # variants to model
age_max <- 6     # needed? (not currently)
n <- 500      # number of individuals
evars <- expand.grid(years=c(1:years),vars=c(1:vars),id=c(1:n))
ysera = as.data.frame(evars)
ysera$titre <- 0.1
ysera$u <- 0   # titre - titre recorded if bled that year, u - variant exposed to that year?
if(model=="default"){
p <- t(matrix(
c(1,0,0,0,  #1 / 2003
1,0,0,0,  #2
1,0,0,0,  #3 / 2005
1,0,0,0,  #4
0,1,0,0,  #5 / 2007
0,1,0,0,  #6
0,1,0,0,  #7 / 2009
0,0,1,0,  #8
0,0,1,0,  #9 / 2011
0,0,0,1),ncol=years))  # probability for each variant (row) will infect in each year (col)
}  # define p
if(model=="cocirc"|model=="crossrect"){
p <- t(matrix(
c(1,0,0,0,  #1 / 2003
1,0,0,0,  #2
1,0,0,0,  #3 / 2005
0.8,0.2,0,0,  #4
0,1,0,0,  #5 / 2007
0,1,0,0,  #6
0,0.8,0.2,0,  #7 / 2009
0,0.2,0.8,0,  #8
0,0,0.8,0.2,  #9 / 2011
0,0,0,1),ncol=years))  # probability for each variant (row) will infect in each year (col)
}  # define p
pplot <- expand.grid(year=c(2003:2012),var=letters[1:4])
pplot$circ <-  as.vector(p)
p1 <- ggplot(data=pplot,aes(x=as.factor(year),y=circ,fill=var)) +
geom_bar(stat = "identity",position = "stack") +
xlab("Year") + theme(axis.text.x = element_text(angle = 45))
#pdf(paste0(data_folder,"assumed_circulation_variants.pdf"),height=5,width=6)
p1
# parameters
y0_mn <- 4        # mean sera at exposure
y0_sd <- 0.25     # sd of sera at exposure
mu <- 0.5         # per year decline in Ab
# need to assign the 'i' and 'j' for alpha, where j is the infected variant and i is the cross react
alpha_index <- expand.grid(i=1:4,j=1:4)
alpha <- rep(0.9,dim(alpha_index)[1]) # 6 values for cross-reactivity [this is a multilier]
# functions
fun01 <- function(x){
tmp <- which(x>0)
return(tmp)
}
tmp <- sample.int(years,size=n,replace=T)  # equally spaced.
born_id <- tmp[order(tmp)]
ysera$born_yr <- NA
# generate data
for(i in 1:n){
oo <- which(ysera$id==i)
ysera$born_yr[oo] <- born_id[i]
}
ysera$age <- 0
ysera$vars2 <- paste0("var-",letters[ysera$vars])
# loop through each ID
for(i in 1:n){
oo <- which(ysera$id==i)
# select when child i is born...
# work through each year to look at infection history
# but only start this once child is born
# which variant?
for(t in ysera$born_yr[i]:years){
# calculate age
dd <- which(ysera$id==i & ysera$years==t)
ysera$age[dd] <- t-(born_id[i]-1)
# exposure in that year
tmp1 <- rmultinom(1,size=1,prob=p[t,])
tmp2 <- apply(tmp1,2,fun01)
aa <- which(ysera$id==i & ysera$years==t)
ee <- which(ysera$id==i & ysera$years==t & ysera$vars==tmp2)
if(length(aa)>0){
# if exposure, then create a response for that
ysera$u[aa] <- tmp2 # variant of which infection happened that year
ysera$titre[ee] <- rnorm(1,y0_mn,y0_sd) # start the response
if(model == "crossrect"){  # add in cross-reactivity responses
ff <- which(ysera$id==i & ysera$years==t & ysera$vars!=tmp2)  # select the titres
gg <- which(alpha_index[,1]==tmp2 & alpha_index[,2]!=tmp2) # returns the index of the parameter
ysera$titre[ff] <- ysera$titre[ee]*alpha[gg] # should always be less than the infecting response
}
}
# waning response, for those that had one last year...
if(t>1){
if(model != "crossrect"){
for(v in 1:vars){
bb <- which(ysera$id==i & ysera$years==(t-1) & ysera$vars==v)
if(ysera$titre[bb]>0.1){
cc <- which(ysera$id==i & ysera$years==(t) & ysera$vars==v)
if(ysera$u[cc]!=v){
# control for elevation/exposure for multiple years
ysera$titre[cc] <- ysera$titre[bb]*exp(-mu)
}
}
}
}else{
# all should decline. If it is this years infection skip
for(v in 1:vars){
cc <- which(ysera$id==i & ysera$years==(t) & ysera$vars==v)
hh <- which(ysera$id==i & ysera$years==(t-1) & ysera$vars==v)
if(ysera$u[cc]!=v){
# control for elevation/exposure for multiple years
ysera$titre[cc] <- ysera$titre[hh]*exp(-mu)
}
}
} # else
} # t>1
} # t
} # i
# select a year for bleeding for each ID
# this needs to be more complicated because of year born and max age
# and the bleed year must be 6-10...
bleed_id <- sample(6:10,size=n,replace=T)
# resample if not 6-10?
for(i in 1:n){
if(bleed_id[i] < born_id[i]){
bleed_id[i] <- sample(6:10,size=1,replace=T)
}
if(bleed_id[i] < born_id[i]){
bleed_id[i] <- 10
}
}
# now need to go through and select sera...
oo <- which(ysera$id==1 & ysera$years==bleed_id[1])
ysamp <- ysera[oo,]
# loop through...
for(i in 2:n){
oo <- which(ysera$id==i & ysera$years==bleed_id[i])
if(ysera$age[oo[1]]<7){
ysamp <- rbind(ysamp,ysera[oo,])
}else{
warning(paste("too old, id",ysera$id[oo[1]]))
}
}
# what is the sample now?
ysamp$years_real <- ysamp$years+2002
table(ysamp$years_real[ysamp$vars2=="var-a"],ysamp$age[ysamp$vars2=="var-a"])
# plot Ab response if we just had this data
ggplot(ysamp,aes(x=jitter(vars),y=titre)) + geom_point()
# mean by year?
tmp1 <- ysamp %>% group_by(vars2,years_real) %>% summarise(n=n(),mean=mean(titre),sd=sd(titre))
ggplot(tmp1,aes(x=vars2,y=mean,fill=as.factor(years_real))) +
geom_bar(stat="identity",position=position_dodge()) +
scale_fill_brewer("Year",palette="Blues") +
xlab("Variant") + ylab("Mean titre (log scale)") +
theme_bw()
tmp2 <- ysamp %>% filter(age<7) %>% group_by(vars2,age,years_real) %>% summarise(n=n(),
mean=mean(titre),
sd=sd(titre))
class(tmp2$mean)
ggplot(tmp2,aes(x=as.factor(years_real),y=as.factor(age),fill=mean)) +
geom_tile() +
facet_wrap(~vars2) +
scale_fill_gradient2(low = "#045a8d",high = "#ef8a62",mid = "white",midpoint = 2.5,
limit = c(0,5)) +  # blue to red
#scale_fill_brewer("ID50",palette="Blues") +
xlab("Year") + ylab("Age") +
theme_bw()
diamonds
library(tidyverse)
View(diamonds)
head(diamonds)
# estimate price
m1 <- lm(price ~ 1, data=diamonds)
summary(m1)
f <- "price ~ 1"
m1 <- lm(f, data=diamonds)
summary(m1)
head(diamonds)
opts <- c("1","carat", "cut","color","clarity","depth","table")
opts <- c("1","carat", "cut","color","clarity","depth","table")
vals <- opts[1]
f <- paste0("price ~ ",vals)
m1 <- lm(f, data=diamonds)
vals <- opts[1:2]
f <- paste0("price ~ ",vals)
f
cat[vals]
dcat[vals]
paste0(vals)
f <- paste0("price ~ ",paste0(vals,"+"))
paste0(vals,"+")
paste0("price ~ ",paste0(vals,"+"))
install.packages('IRkernel')
IRkernel::installspec()
jupyter labextension install @techrah/text-shortcuts
IRkernel::installspec(name = 'ir42', displayname = 'R 4.2')
IRkernel::installspec(name = 'ir42', displayname = 'R 4.2',user=FALSE)
?abline
?vline
library(serosolver)
tmp1 <- "/Users/lsh1603970/GitHub/serosolver_norovirus_simulation/chains/sim_noro" # works fine
chains <- load_mcmc_chains(tmp,convert_mcmc=TRUE,burnin = mcmc_pars["adaptive_period"],unfixed = TRUE)
chains <- load_mcmc_chains(tmp1,convert_mcmc=TRUE,burnin = mcmc_pars["adaptive_period"],unfixed = TRUE)
## MCMC settings, not super important but can be tweaked
mcmc_pars <- c("save_block"=100,"thin"=100,"thin_hist"=500,"iterations"=100000,
"adaptive_period"=50000,
"burnin"=0,"switch_sample"=2,"hist_switch_prob"=0.05,
"year_swap_propn"=0.8,"swap_propn"=0.5,
"inf_propn"=0.5,"hist_sample_prob"=1,"move_size"=3, "hist_opt"=0,
"popt"=0.44,"popt_hist"=0.44,"opt_freq"=2000,propose_from_prior=TRUE)
tmp1 <- "/Users/lsh1603970/GitHub/serosolver_norovirus_simulation/chains/sim_noro" # works fine
chains <- load_mcmc_chains(tmp1,convert_mcmc=TRUE,burnin = mcmc_pars["adaptive_period"],unfixed = TRUE)
library(ggplot2)
library(coda)
library(plyr)
library(reshape2)
library(data.table)
library(foreach)
library(doParallel)
library(parallel)
library(dplyr)
library(readr)
library(viridis)
library(ggpubr)
chains <- load_mcmc_chains(tmp1,convert_mcmc=TRUE,burnin = mcmc_pars["adaptive_period"],unfixed = TRUE)
rm(chains)
tmp2 <- "/Users/lsh1603970/GitHub/serosolver_norovirus_simulation/chains/sim_noro_allsampled" # works fine
chains <- load_mcmc_chains(tmp2,convert_mcmc=TRUE,burnin = mcmc_pars["adaptive_period"],unfixed = TRUE)
library(ggplot2)
library(plyr)
library(dplyr)
library(plotly)
rm(list = ls())
run_name <- "data_t3"
main_wd <-  "/Users/lsh1603970/GitHub/serosolver_norovirus" #"~/Documents/norovirus_test/"
setwd(main_wd)
dat <- read.csv("antigenic_map_noro_inferred_trueequal.csv")
head(dat)
ggplot(dat,aes(x=x_coord,y=y_coord,group=data.type,col=data.type,label=inf_times)) + geom_point() +
geom_text(aes(x=x_coord+0.6,y=y_coord)) +
geom_line(data=dat[dat$data.type=="fixed",],aes(x=x_coord,y=y_coord))
rm(list = ls())
run_name <- "data_t3"
main_wd <-  "/Users/lsh1603970/GitHub/serosolver_norovirus" #"~/Documents/norovirus_test/"
setwd(main_wd)
dat <- read.csv("antigenic_map_noro_inferred_trueequal.csv")
head(dat)
ggplot(dat,aes(x=x_coord,y=y_coord,group=data.type,col=data.type,label=inf_times)) + geom_point() +
geom_text(aes(x=x_coord+0.6,y=y_coord)) +
geom_line(data=dat[dat$data.type=="fixed",],aes(x=x_coord,y=y_coord))
rm(list = ls())
run_name <- "data_t3"
main_wd <-  "/Users/lsh1603970/GitHub/serosolver_norovirus" #"~/Documents/norovirus_test/"
setwd(main_wd)
dat <- read.csv("antigenic_map_noro_inferred_trueequal.csv")
head(dat)
ggplot(dat,aes(x=x_coord,y=y_coord,group=data.type,col=data.type,label=inf_times)) + geom_point() +
geom_text(aes(x=x_coord+0.6,y=y_coord)) +
geom_line(data=dat[dat$data.type=="fixed",],aes(x=x_coord,y=y_coord))
rm(list = ls())
run_name <- "data_t3"
main_wd <-  "/Users/lsh1603970/GitHub/serosolver_norovirus" #"~/Documents/norovirus_test/"
setwd(main_wd)
dat <- read.csv("antigenic_map_noro_inferred_trueequal.csv")
head(dat)
ggplot(dat,aes(x=x_coord,y=y_coord,group=data.type,col=data.type,label=inf_times)) + geom_point() +
geom_text(aes(x=x_coord+0.6,y=y_coord)) +
geom_line(data=dat[dat$data.type=="fixed",],aes(x=x_coord,y=y_coord))
rm(list = ls())
run_name <- "data_t3"
main_wd <-  "/Users/lsh1603970/GitHub/serosolver_norovirus" #"~/Documents/norovirus_test/"
setwd(main_wd)
dat <- read.csv("antigenic_map_noro_inferred_trueequal.csv")
head(dat)
ggplot(dat,aes(x=x_coord,y=y_coord,group=data.type,col=data.type,label=inf_times)) + geom_point() +
geom_text(aes(x=x_coord+0.6,y=y_coord)) +
geom_line(data=dat[dat$data.type=="fixed",],aes(x=x_coord,y=y_coord))
rm(list = ls())
run_name <- "data_t3"
main_wd <-  "/Users/lsh1603970/GitHub/serosolver_norovirus" #"~/Documents/norovirus_test/"
setwd(main_wd)
dat <- read.csv("antigenic_map_noro_inferred_trueequal.csv")
head(dat)
ggplot(dat,aes(x=x_coord,y=y_coord,group=data.type,col=data.type,label=inf_times)) + geom_point() +
geom_text(aes(x=x_coord+0.6,y=y_coord)) +
geom_line(data=dat[dat$data.type=="fixed",],aes(x=x_coord,y=y_coord))
rm(list = ls())
run_name <- "data_t3"
main_wd <-  "/Users/lsh1603970/GitHub/serosolver_norovirus" #"~/Documents/norovirus_test/"
setwd(main_wd)
dat <- read.csv("antigenic_map_noro_inferred_trueequal.csv")
head(dat)
ggplot(dat,aes(x=x_coord,y=y_coord,group=data.type,col=data.type,label=inf_times)) + geom_point() +
geom_text(aes(x=x_coord+0.6,y=y_coord)) +
geom_line(data=dat[dat$data.type=="fixed",],aes(x=x_coord,y=y_coord))
rm(list = ls())
run_name <- "data_t3"
main_wd <-  "/Users/lsh1603970/GitHub/serosolver_norovirus" #"~/Documents/norovirus_test/"
setwd(main_wd)
dat <- read.csv("antigenic_map_noro_inferred_trueequal.csv")
head(dat)
ggplot(dat,aes(x=x_coord,y=y_coord,group=data.type,col=data.type,label=inf_times)) + geom_point() +
geom_text(aes(x=x_coord+0.6,y=y_coord)) +
geom_line(data=dat[dat$data.type=="fixed",],aes(x=x_coord,y=y_coord))
run_name <- "data_t3"
main_wd <-  "/Users/lsh1603970/GitHub/serosolver_norovirus" #"~/Documents/norovirus_test/"
setwd(main_wd)
dat <- read.csv("antigenic_map_noro_inferred_trueequal.csv")
head(dat)
ggplot(dat,aes(x=x_coord,y=y_coord,group=data.type,col=data.type,label=inf_times)) + geom_point() +
geom_text(aes(x=x_coord+0.6,y=y_coord)) +
geom_line(data=dat[dat$data.type=="fixed",],aes(x=x_coord,y=y_coord))
library(ggplot2)
library(coda)
library(plyr)
library(reshape2)
library(data.table)
library(foreach)
library(doParallel)
library(parallel)
library(dplyr)
library(readr)
library(viridis)
library(ggpubr)
#library(devtools)
library(misc3d)
library(plot3D)
library(rgl)
#serosolver_wd <- "~/Documents/GitHub/serosolver/"
#devtools::load_all(serosolver_wd)
library(serosolver)
# notes: a "makefile" is needed to run this. I think this si something to do with ensuring the right R packages
# are installed.
rm(list = ls())
run_name <- "data_test_ac" #"sim_noro_allsampled" #
main_wd <-  "/Users/lsh1603970/GitHub/serosolver_norovirus_simulation" #"~/Documents/norovirus_test/"
chain_wd <- paste0(main_wd,"/chains/",run_name)
save_wd <- paste0(main_wd,"/figures/chain_plots/")
if(!dir.exists(save_wd)) dir.create(save_wd,recursive = TRUE)
if(!dir.exists(chain_wd)) dir.create(chain_wd,recursive = TRUE)
buckets <- 1 ## Ignore
prior_version <- 2 ## Which prior on the infection histories to use? Prior version 2 is generally preferred
n_chains <- 5 ## Number of MCMC chains to run
rerun <- TRUE ## Set to FALSE if you just want to load in previously run chains
setwd(main_wd)
print(paste0("In directory: ", main_wd))
print(paste0("Saving to: ", save_wd))
set.seed(1)
## Run multiple chains in parallel
cl <- makeCluster(n_chains)
registerDoParallel(cl)
## MCMC settings, not super important but can be tweaked
mcmc_pars <- c("save_block"=100,"thin"=100,"thin_hist"=500,"iterations"=100000,
"adaptive_period"=50000,
"burnin"=0,"switch_sample"=2,"hist_switch_prob"=0.05,
"year_swap_propn"=0.8,"swap_propn"=0.5,
"inf_propn"=0.5,"hist_sample_prob"=1,"move_size"=3, "hist_opt"=0,
"popt"=0.44,"popt_hist"=0.44,"opt_freq"=2000,propose_from_prior=TRUE)
## Simulation parameters
n_indivs <- 250
n_groups <- 1 ## Leave as 1, can in theory make multiple groups with distinct FOI parameters, but needs extra setup
n_samps <- 1 ## Number of samples per person
repeats <- 1 ## Number of repeat measurements per variant/sample combination
samp_min <- 2008 ## First sample year
samp_max <- 2012 ## Final sample year
year_min <- 2000 ## First year of possible circulation (ie. time 0 of the simulation)
year_max <- 2012 ## Final year of possible circulation
age_min <- 1 ## Age minimum and maximum in years, simulated from a uniform distribution
age_max <- 7
## Viruses and times for samples
sampled_viruses <- c(2002,2006,2009,2012)
sampling_times <- seq(samp_min, samp_max, by=1)
if(run_name == "data_test_ac"){
antigenic_mapB <- read_csv("antigenic_map_noro_inferred_jump.csv")
oo <- match(sampled_viruses,antigenic_mapB$inf_times)
antigenic_coords <- antigenic_mapB[oo,]
names(antigenic_coords) <- c("X","Y","Strain")
antigenic_map <- (read_csv("antigenic_map_noro_inferred_trueequal.csv")) #
}
if(run_name == "data_test_ac2"){
antigenic_mapB <- read_csv("antigenic_map_noro_inferred_jump.csv")
oo <- match(sampled_viruses,antigenic_mapB$inf_times)
antigenic_coords <- antigenic_mapB[oo,]
names(antigenic_coords) <- c("X","Y","Strain")
antigenic_map <- antigenic_mapB #as.data.frame(read_csv("antigenic_map_noro_inferred_temporal.csv")) #
}
if(run_name != "data_test_ac2" & run_name != "data_test_ac"){
## Create a fake antigenic map -- can put in what you like here
antigenic_coords <- data.frame(Strain=c(2000,2002,2006,2009,2012),X=c(0,0.5,3,3.5,4),Y=c(0,2,1,3,4))
antigenic_map <- generate_antigenic_map_flexible(antigenic_coords,
year_max=2013,year_min=2000,spar = 0.001)
}
